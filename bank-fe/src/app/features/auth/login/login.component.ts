import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  Validators,
  ReactiveFormsModule,
} from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { PasswordModule } from 'primeng/password';
import { CardModule } from 'primeng/card';
import { MessageModule } from 'primeng/message';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { MessageService } from 'primeng/api';
import { AuthService, LoginRequest } from '../../../core/services/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterLink,
    ButtonModule,
    InputTextModule,
    PasswordModule,
    CardModule,
    MessageModule,
    ProgressSpinnerModule,
  ],
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss',
})
export class LoginComponent {
  loginForm: FormGroup;
  isLoading = false;
  errorMessage = '';

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private messageService: MessageService,
  ) {
    this.loginForm = this.fb.group({
      email: ['vip.mstudio@gmail.com', [Validators.required, Validators.email]],
      password: ['123456', [Validators.required, Validators.minLength(3)]],
    });
  }

  onSubmit(): void {
    if (this.loginForm.valid) {
      this.isLoading = true;
      this.errorMessage = ''; // Clear previous error
      const loginData: LoginRequest = this.loginForm.value;

      this.authService.login(loginData).subscribe({
        next: (response) => {
          if (response) {
            this.messageService.add({
              severity: 'success',
              summary: 'Th√†nh c√¥ng',
              detail: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
              life: 3000,
            });
            this.router.navigate(['/app/dashboard']);
          } else {
            this.errorMessage = 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
            this.isLoading = false;
          }
        },
        error: (error) => {
          console.error('üöÄ ~ LoginComponent ~ login error:', error);
          this.isLoading = false;

          // Handle EMAIL_NOT_VERIFIED error specially
          if (error.error && error.error.code === 'EMAIL_NOT_VERIFIED') {
            this.handleEmailNotVerified(loginData.email);
            return;
          }

          // Handle other error messages
          if (error.error && error.error.message) {
            this.errorMessage = this.mapErrorMessage(error.error.message);
          } else if (error.status) {
            this.errorMessage = this.mapHttpStatusError(error.status);
          } else {
            this.errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
          }
        },
        complete: () => {
          this.isLoading = false;
        },
      });
    } else {
      this.messageService.add({
        severity: 'warn',
        summary: 'C·∫£nh b√°o',
        detail: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p',
        life: 3000,
      });
    }
  }

  private mapErrorMessage(message: string): string {
    const errorMap: Record<string, string> = {
      EMAIL_NOT_VERIFIED:
        'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ v√† x√°c th·ª±c email.',
      INVALID_CREDENTIALS: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.',
      USER_NOT_FOUND: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.',
      USER_ALREADY_EXISTS: 'Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i.',
      INVALID_TOKEN: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.',
      INSUFFICIENT_BALANCE: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.',
      WITHDRAWAL_LIMIT_EXCEEDED: 'V∆∞·ª£t qu√° gi·ªõi h·∫°n r√∫t ti·ªÅn.',
      TRANSACTION_NOT_FOUND: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch.',
      INVALID_AMOUNT: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.',
      ACCOUNT_LOCKED: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a.',
      VERIFICATION_CODE_INVALID: 'M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá.',
      VERIFICATION_CODE_EXPIRED: 'M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n.',
    };

    return errorMap[message] || message;
  }

  private mapHttpStatusError(status: number): string {
    const statusMap: Record<number, string> = {
      400: 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.',
      401: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
      403: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y.',
      404: 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n.',
      409: 'Xung ƒë·ªôt d·ªØ li·ªáu.',
      422: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.',
      429: 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.',
      500: 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.',
      502: 'L·ªói k·∫øt n·ªëi m√°y ch·ªß.',
      503: 'D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng.',
    };

    return statusMap[status] || `L·ªói ${status}: ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.`;
  }

  private handleEmailNotVerified(email: string): void {
    // Show success message
    this.messageService.add({
      severity: 'info',
      summary: 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c',
      detail: 'ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c qua email. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.',
      life: 5000,
    });

    // Resend verification email
    this.authService.resendVerification(email).subscribe({
      next: () => {
        // Navigate to verify-email page with email parameter
        this.router.navigate(['/verify-email'], {
          queryParams: { email: email },
        });
      },
      error: (error) => {
        console.error('Failed to resend verification:', error);
        // Still navigate to verify-email page even if resend fails
        this.router.navigate(['/verify-email'], {
          queryParams: { email: email },
        });
      },
    });
  }
}
