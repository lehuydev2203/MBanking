/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user account
         * @description Creates a new user account and sends verification email. If email exists but not verified, sends new verification code.
         */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify email address
         * @description Verifies email address using the verification code sent to email
         */
        post: operations["AuthController_verifyEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/resend-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend verification email
         * @description Resends verification email to unverified accounts
         */
        post: operations["AuthController_resendVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login user
         * @description Authenticates user and returns JWT token
         */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change password
         * @description Changes user password (requires authentication)
         */
        post: operations["AuthController_changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Returns the current user profile information
         */
        get: operations["AccountsController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user profile
         * @description Updates the current user profile information
         */
        patch: operations["AccountsController_updateProfile"];
        trace?: never;
    };
    "/v1/profile/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set account nickname
         * @description Sets a nickname for the account to be used in transfers
         */
        post: operations["AccountsController_setNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account balance
         * @description Returns the current user account balance
         */
        get: operations["BalanceController_getBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/can-withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if withdrawal is allowed
         * @description Checks if a withdrawal amount is allowed based on balance, limits, and daily usage
         */
        get: operations["TransactionsController_canWithdraw"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deposit money
         * @description Deposits money into the user account
         */
        post: operations["TransactionsController_deposit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw money
         * @description Withdraws money from the user account with balance and limit checks
         */
        post: operations["TransactionsController_withdraw"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lịch sử giao dịch
         * @description Lấy danh sách tất cả giao dịch của người dùng bao gồm: nạp tiền, rút tiền, chuyển khoản đi và chuyển khoản đến. Có thể lọc theo loại giao dịch, khoảng thời gian và số tiền.
         */
        get: operations["TransactionsController_getTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions/export.csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export transactions to CSV
         * @description Exports user transactions to CSV format with filters
         */
        get: operations["TransactionsController_exportTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallet/can-withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if withdrawal is allowed
         * @description Checks if a withdrawal amount is allowed based on balance, limits, and daily usage
         */
        get: operations["WalletController_canWithdraw"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users list
         * @description Retrieves paginated list of users with search and filter options (Admin/Superadmin only)
         */
        get: operations["AdminController_getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user
         * @description Updates user role or status (Superadmin only)
         */
        patch: operations["AdminController_updateUser"];
        trace?: never;
    };
    "/v1/admin/users/{id}/resend-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend user verification
         * @description Resends verification email to a specific user (Admin/Superadmin only)
         */
        post: operations["AdminController_resendUserVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transactions list
         * @description Retrieves paginated list of all transactions with filters (Admin/Superadmin only)
         */
        get: operations["AdminController_getTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns the health status of the application and database
         */
        get: operations["HealthController_getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Khởi tạo chuyển khoản
         * @description Bắt đầu quá trình chuyển khoản. Hệ thống sẽ gửi mã xác nhận 6 chữ số qua email để xác thực giao dịch.
         */
        post: operations["TransfersController_initiateTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Xác nhận chuyển khoản
         * @description Hoàn tất giao dịch chuyển khoản bằng mã xác nhận 6 chữ số đã nhận qua email.
         */
        post: operations["TransfersController_confirmTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lịch sử chuyển khoản (Deprecated)
         * @description ⚠️ API này đã được tích hợp vào /transactions. Vui lòng sử dụng GET /transactions để lấy lịch sử giao dịch đầy đủ bao gồm cả chuyển khoản. API này sẽ được loại bỏ trong phiên bản tương lai.
         */
        get: operations["TransfersController_getTransferHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transfers/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Đặt biệt danh tài khoản
         * @description Thiết lập biệt danh cho tài khoản để người khác có thể chuyển tiền dễ dàng hơn thay vì nhớ số tài khoản dài.
         */
        post: operations["TransfersController_setNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterDto: {
            /**
             * @description Full name of the user
             * @example Nguyễn Văn A
             */
            name: string;
            /**
             * @description Email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Phone number
             * @example +84901234567
             */
            phone?: string;
            /**
             * @description Password (minimum 8 characters)
             * @example SecurePass123!
             */
            password: string;
        };
        MessageResponseDto: {
            /**
             * @description Response message
             * @example VERIFICATION_SENT
             */
            message: string;
        };
        VerifyEmailDto: {
            /**
             * @description Verification code sent to email
             * @example ABC123
             */
            code: string;
        };
        ResendVerificationDto: {
            /**
             * @description Email address to resend verification
             * @example user@example.com
             */
            email: string;
        };
        LoginDto: {
            /**
             * @description Email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Password
             * @example SecurePass123!
             */
            password: string;
        };
        LoginResponseDto: {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /**
             * @description Token expiration time in seconds
             * @example 900
             */
            expiresIn: number;
        };
        ChangePasswordDto: {
            /**
             * @description Current password
             * @example OldPass123!
             */
            currentPassword: string;
            /**
             * @description New password (minimum 8 characters)
             * @example NewPass123!
             */
            newPassword: string;
        };
        ProfileResponseDto: {
            /** @description Account ID */
            id: string;
            /** @description Full name */
            name: string;
            /** @description Email address */
            email: string;
            /** @description Phone number */
            phone?: string;
            /**
             * @description User role
             * @enum {string}
             */
            role: "user" | "admin" | "superadmin";
            /**
             * @description Account status
             * @enum {string}
             */
            status: "active" | "locked";
            /** @description Email verification status */
            isEmailVerified: boolean;
            /**
             * Format: date-time
             * @description Account creation date
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Email verification date
             */
            verifiedAt?: string;
        };
        UpdateProfileDto: {
            /**
             * @description Full name
             * @example Nguyễn Văn B
             */
            name?: string;
            /**
             * @description Phone number
             * @example +84901234567
             */
            phone?: string;
        };
        SetNicknameDto: {
            /**
             * @description Biệt danh cho tài khoản. Chỉ được sử dụng chữ cái, số và dấu gạch dưới. Dùng để người khác có thể chuyển tiền cho bạn dễ dàng hơn
             * @example john_doe
             */
            nickname: string;
        };
        BalanceResponseDto: {
            /**
             * @description Account balance
             * @example 1000000
             */
            balance: number;
        };
        CanWithdrawResponseDto: {
            /** @description Whether withdrawal is allowed */
            allowed: boolean;
            /** @description Reasons why withdrawal is not allowed */
            reasons: string[];
            /** @description Current account balance */
            balance: number;
            /** @description Amount used today (in VND timezone) */
            dailyUsed: number;
            /** @description Daily withdrawal limit (in VND) */
            dailyLimit: number;
        };
        DepositDto: {
            /**
             * @description Amount to deposit (must be greater than 0)
             * @example 1000000
             */
            amount: number;
            /**
             * @description Transaction description/name
             * @example Salary deposit
             */
            transName?: string;
            /**
             * @description Client request ID for idempotency
             * @example deposit-123-456
             */
            clientRequestId?: string;
        };
        TransactionResponseDto: {
            /** @description Transaction ID */
            id: string;
            /** @description Account ID */
            accountId: string;
            /** @description Transaction name/description */
            transName: string;
            /** @description Transaction amount */
            transMoney: number;
            /**
             * @description Transaction type
             * @enum {number}
             */
            transType: 1 | 2;
            /** @description Client request ID */
            clientRequestId?: string;
            /**
             * Format: date-time
             * @description Transaction creation date
             */
            createdAt: string;
        };
        WithdrawDto: {
            /**
             * @description Amount to withdraw (must be greater than 0)
             * @example 500000
             */
            amount: number;
            /**
             * @description Transaction description/name
             * @example ATM withdrawal
             */
            transName?: string;
            /**
             * @description Client request ID for idempotency
             * @example withdraw-123-456
             */
            clientRequestId?: string;
        };
        PaginatedResponseDto: {
            /** @description Array of items */
            items: string[];
            /** @description Total number of items */
            total: number;
            /** @description Current page number */
            page: number;
            /** @description Number of items per page */
            pageSize: number;
            /** @description Total number of pages */
            totalPages: number;
        };
        UpdateUserDto: {
            /**
             * @description User role
             * @enum {string}
             */
            role?: "user" | "admin" | "superadmin";
            /**
             * @description User status
             * @enum {string}
             */
            status?: "active" | "locked";
        };
        TransferRequestDto: {
            /**
             * @description Số tài khoản (10 chữ số) hoặc nickname (3-20 ký tự) của người nhận
             * @example 1234567890
             */
            recipientIdentifier: string;
            /**
             * @description Số tiền chuyển khoản (VND). Tối thiểu 1,000 VND, tối đa 20,000,000 VND mỗi giao dịch
             * @example 100000
             */
            amount: number;
            /**
             * @description Nội dung chuyển khoản. Mô tả ngắn gọn về mục đích chuyển tiền
             * @example Thanh toán dịch vụ
             */
            transName: string;
        };
        TransferInitiateResponseDto: {
            /**
             * @description Thông báo trạng thái
             * @example VERIFICATION_CODE_SENT
             */
            message: string;
            /**
             * @description Tên người nhận
             * @example Nguyễn Văn A
             */
            recipientName: string;
            /**
             * @description Số tài khoản người nhận
             * @example 1234567890
             */
            recipientAccountNumber: string;
            /**
             * @description Số tiền chuyển khoản
             * @example 100000
             */
            amount: number;
            /**
             * Format: date-time
             * @description Thời gian hết hạn của mã xác nhận
             * @example 2024-01-01T12:05:00.000Z
             */
            expiresAt: string;
        };
        TransferConfirmDto: {
            /**
             * @description Mã xác nhận 6 chữ số được gửi qua email. Mã có hiệu lực trong 5 phút
             * @example 123456
             */
            code: string;
        };
        TransferConfirmResponseDto: {
            /**
             * @description Thông báo trạng thái
             * @example TRANSFER_COMPLETED
             */
            message: string;
            /**
             * @description Số tiền đã chuyển
             * @example 100000
             */
            amount: number;
            /**
             * @description Tên người nhận
             * @example Nguyễn Văn A
             */
            recipientName: string;
            /**
             * @description Số tài khoản người nhận
             * @example 1234567890
             */
            recipientAccountNumber: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description Registration successful, verification email sent */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Email exists but not verified, new verification code sent */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Email already exists and verified */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AuthController_verifyEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmailDto"];
            };
        };
        responses: {
            /** @description Email verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Invalid or expired verification code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AuthController_resendVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResendVerificationDto"];
            };
        };
        responses: {
            /** @description Verification email resent */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Email already verified */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
            /** @description Invalid credentials */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Email not verified or account locked */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AuthController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Invalid current password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AccountsController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AccountsController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileDto"];
            };
        };
        responses: {
            /** @description Profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponseDto"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AccountsController_setNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetNicknameDto"];
            };
        };
        responses: {
            /** @description Nickname set successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponseDto"];
                };
            };
            /** @description Nickname already taken or invalid format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    BalanceController_getBalance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Balance retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BalanceResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransactionsController_canWithdraw: {
        parameters: {
            query: {
                /** @description Amount to check */
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Withdrawal check completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CanWithdrawResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransactionsController_deposit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepositDto"];
            };
        };
        responses: {
            /** @description Deposit successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponseDto"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransactionsController_withdraw: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WithdrawDto"];
            };
        };
        responses: {
            /** @description Withdrawal successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponseDto"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Withdrawal not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransactionsController_getTransactions: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                pageSize?: number;
                /** @description Transaction type filter */
                type?: 1 | 2;
                /** @description Start date filter (ISO string) */
                from?: string;
                /** @description End date filter (ISO string) */
                to?: string;
                /** @description Minimum amount filter */
                min?: number;
                /** @description Maximum amount filter */
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lấy lịch sử giao dịch thành công. Mỗi giao dịch sẽ có thông tin phân loại (transactionCategory và transactionTypeLabel) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransactionsController_exportTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CSV export successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    WalletController_canWithdraw: {
        parameters: {
            query: {
                /** @description Amount to check */
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Withdrawal check completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CanWithdrawResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AdminController_getUsers: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                pageSize?: number;
                /** @description Search query for name or email */
                q?: string;
                /** @description Filter by role */
                role?: "user" | "admin" | "superadmin";
                /** @description Filter by status */
                status?: "active" | "locked";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AdminController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Insufficient permissions or self-demotion attempt */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AdminController_resendUserVerification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verification email resent */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description User already verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AdminController_getTransactions: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                pageSize?: number;
                /** @description Filter by transaction type */
                type?: 1 | 2;
                /** @description Filter by account ID */
                accountId?: string;
                /** @description Start date filter (ISO string) */
                from?: string;
                /** @description End date filter (ISO string) */
                to?: string;
                /** @description Minimum amount filter */
                min?: number;
                /** @description Maximum amount filter */
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transactions retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    HealthController_getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    TransfersController_initiateTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransferRequestDto"];
            };
        };
        responses: {
            /** @description Chuyển khoản được khởi tạo thành công, mã xác nhận đã được gửi qua email */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransferInitiateResponseDto"];
                };
            };
            /** @description Dữ liệu đầu vào không hợp lệ hoặc không tìm thấy tài khoản người nhận */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Số dư không đủ hoặc vượt quá giới hạn giao dịch */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Không tìm thấy tài khoản người nhận */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TransfersController_confirmTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransferConfirmDto"];
            };
        };
        responses: {
            /** @description Chuyển khoản hoàn tất thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransferConfirmResponseDto"];
                };
            };
            /** @description Mã xác nhận không hợp lệ hoặc đã hết hạn */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Số dư không đủ để thực hiện giao dịch */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TransfersController_getTransferHistory: {
        parameters: {
            query?: {
                /** @description Số trang (bắt đầu từ 1) */
                page?: number;
                /** @description Số lượng giao dịch mỗi trang (mặc định 10) */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lấy lịch sử chuyển khoản thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TransfersController_setNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetNicknameDto"];
            };
        };
        responses: {
            /** @description Đặt biệt danh thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Biệt danh đã được sử dụng hoặc định dạng không hợp lệ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
