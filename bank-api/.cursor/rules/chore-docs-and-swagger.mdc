---
description: 'Lu√¥n c·∫≠p nh·∫≠t Swagger + docs/FEATURES.md khi thay ƒë·ªïi API.'
globs: ['src/**/*.ts', 'docs/**/*.md']
---

# Documentation & Swagger Standards

## Swagger Documentation Requirements

### B·∫Øt bu·ªôc Swagger Annotations

#### Controller Level

```typescript
@ApiTags('Auth') // Group endpoints by feature
@Controller('auth')
export class AuthController {
  // Controller implementation
}
```

#### Endpoint Level

```typescript
@Post('register')
@HttpCode(HttpStatus.CREATED)
@ApiOperation({
  summary: 'Register a new user account',
  description: 'Creates a new user account and sends verification email. If email exists but not verified, sends new verification code.'
})
@ApiResponse({
  status: 201,
  description: 'Registration successful, verification email sent',
  type: MessageResponseDto,
  schema: {
    example: { success: true, data: { message: 'VERIFICATION_SENT' } }
  }
})
@ApiResponse({
  status: 409,
  description: 'Email already exists and verified',
  schema: {
    example: {
      success: false,
      code: 'EMAIL_EXISTS',
      message: 'Email already exists and is verified'
    }
  }
})
async register(@Body() registerDto: RegisterDto) {
  return this.authService.register(registerDto);
}
```

#### DTO Documentation

```typescript
export class RegisterDto {
  @ApiProperty({
    description: 'Full name of the user',
    example: 'Nguy·ªÖn VƒÉn A',
    minLength: 2,
  })
  @IsString()
  @MinLength(2)
  name: string;

  @ApiProperty({
    description: 'Email address',
    example: 'user@example.com',
  })
  @IsEmail()
  email: string;

  @ApiPropertyOptional({
    description: 'Phone number (Vietnamese format)',
    example: '+84901234567',
  })
  @IsOptional()
  @IsString()
  phone?: string;

  @ApiProperty({
    description: 'Password (minimum 8 characters with complexity requirements)',
    example: 'SecurePass123!',
    minLength: 8,
  })
  @IsString()
  @MinLength(8)
  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/)
  password: string;
}
```

#### Response DTOs

```typescript
export class LoginResponseDto {
  @ApiProperty({
    description: 'JWT access token',
    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
  })
  accessToken: string;

  @ApiProperty({
    description: 'Token expiration time in seconds',
    example: 900,
  })
  expiresIn: number;
}

export class PaginatedResponseDto<T> {
  @ApiProperty({ description: 'Array of items' })
  items: T[];

  @ApiProperty({ description: 'Total number of items' })
  total: number;

  @ApiProperty({ description: 'Current page number' })
  page: number;

  @ApiProperty({ description: 'Number of items per page' })
  pageSize: number;

  @ApiProperty({ description: 'Total number of pages' })
  totalPages: number;
}
```

### Authentication Documentation

```typescript
@ApiBearerAuth('JWT-auth') // For protected endpoints
@UseGuards(JwtAuthGuard)
export class ProtectedController {
  @Get('profile')
  @ApiOperation({
    summary: 'Get user profile',
    description: 'Returns the current authenticated user profile information',
  })
  @ApiResponse({
    status: 200,
    description: 'Profile retrieved successfully',
    type: ProfileResponseDto,
  })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - Invalid or expired token',
    schema: {
      example: {
        success: false,
        code: 'UNAUTHORIZED',
        message: 'Invalid or expired token',
      },
    },
  })
  async getProfile(@CurrentUser() user: Account) {
    return this.accountsService.getProfile(user._id.toString());
  }
}
```

### Error Response Documentation

```typescript
@ApiResponse({
  status: 400,
  description: 'Bad Request - Validation failed',
  schema: {
    example: {
      success: false,
      code: 'BAD_REQUEST',
      message: 'Validation failed',
      details: {
        email: ['Email must be a valid email address'],
        password: ['Password must be at least 8 characters long']
      },
      timestamp: '2024-01-01T00:00:00.000Z',
      path: '/auth/register'
    }
  }
})
```

## Swagger Configuration

### Main Application Setup

```typescript
// src/main.ts
const config = new DocumentBuilder()
  .setTitle('Banking API')
  .setDescription(
    'NestJS Banking API with RBAC, email verification, and transaction limits',
  )
  .setVersion('1.0')
  .addBearerAuth(
    {
      type: 'http',
      scheme: 'bearer',
      bearerFormat: 'JWT',
      name: 'JWT',
      description: 'Enter JWT token',
      in: 'header',
    },
    'JWT-auth',
  )
  .build();

const document = SwaggerModule.createDocument(app, config);
SwaggerModule.setup('docs', app, document, {
  swaggerOptions: {
    persistAuthorization: true,
  },
});

// Also expose JSON format
SwaggerModule.setup('docs-json', app, document, {
  jsonDocumentUrl: 'swagger.json',
});
```

### Global Response Format

```typescript
// All responses follow this format:
{
  success: true|false,
  data?: T,           // Present on success
  code?: string,      // Present on error
  message?: string,   // Present on error
  details?: any,      // Present on error (optional)
  timestamp?: string, // Present on error
  path?: string       // Present on error
}
```

## Documentation Update Process

### Khi th√™m endpoint m·ªõi

1. **Th√™m Swagger annotations**:
   - `@ApiOperation()` v·ªõi summary v√† description
   - `@ApiResponse()` cho t·∫•t c·∫£ status codes
   - `@ApiProperty()` cho DTOs

2. **C·∫≠p nh·∫≠t DTOs**:
   - Validation decorators
   - Swagger property descriptions
   - Examples cho complex fields

3. **Test Swagger UI**:
   - Ki·ªÉm tra endpoint hi·ªÉn th·ªã ƒë√∫ng
   - Test authentication flow
   - Verify examples work

4. **C·∫≠p nh·∫≠t docs/FEATURES.md**:
   - Th√™m endpoint v√†o danh s√°ch
   - M√¥ t·∫£ ch·ª©c nƒÉng
   - C·∫≠p nh·∫≠t error codes

### Khi thay ƒë·ªïi endpoint hi·ªán c√≥

1. **C·∫≠p nh·∫≠t Swagger annotations**
2. **C·∫≠p nh·∫≠t DTOs n·∫øu c·∫ßn**
3. **Test backward compatibility**
4. **C·∫≠p nh·∫≠t version n·∫øu breaking change**
5. **C·∫≠p nh·∫≠t docs/FEATURES.md**

### Khi th√™m error code m·ªõi

1. **C·∫≠p nh·∫≠t error handling**
2. **Th√™m v√†o Swagger examples**
3. **C·∫≠p nh·∫≠t docs/FEATURES.md**
4. **C·∫≠p nh·∫≠t test cases**

## FEATURES.md Maintenance

### Structure Requirements

```markdown
# Banking API - T√≠nh nƒÉng chi ti·∫øt

## üìã Danh s√°ch t√≠nh nƒÉng ƒë√£ tri·ªÉn khai

### ‚úÖ Authentication & Authorization

- [x] User registration v·ªõi email verification
- [x] Email verification v·ªõi m√£ 6 ch·ªØ s·ªë (15 ph√∫t)
- [x] Login v·ªõi JWT token (15 ph√∫t)
- [x] Password change v·ªõi validation
- [x] Role-based access control (RBAC)
  - [x] User: Qu·∫£n l√Ω t√†i kho·∫£n c√° nh√¢n
  - [x] Admin: Qu·∫£n l√Ω users v√† transactions
  - [x] Superadmin: Full access + qu·∫£n l√Ω roles
- [x] Rate limiting cho auth endpoints (5 req/10min)

### ‚úÖ Transaction System

- [x] Deposit money (kh√¥ng gi·ªõi h·∫°n)
- [x] Withdraw money v·ªõi limits:
  - [x] Per-transaction limit: 20,000,000 VND
  - [x] Daily limit: 500,000,000 VND (theo VN timezone)
- [x] Transaction history v·ªõi pagination
- [x] Transaction filtering (type, date range, amount)
- [x] CSV export v·ªõi CSV injection protection
- [x] Idempotency support v·ªõi clientRequestId
- [x] MongoDB transactions cho data consistency
```

### API Endpoints Documentation

```markdown
## üìù API Endpoints

### Authentication

- `POST /auth/register` - ƒêƒÉng k√Ω t√†i kho·∫£n
- `POST /auth/verify` - X√°c minh email
- `POST /auth/resend-verification` - G·ª≠i l·∫°i m√£ x√°c minh
- `POST /auth/login` - ƒêƒÉng nh·∫≠p
- `POST /auth/change-password` - ƒê·ªïi m·∫≠t kh·∫©u

### User Profile

- `GET /profile` - L·∫•y th√¥ng tin profile
- `PATCH /profile` - C·∫≠p nh·∫≠t profile
- `GET /balance` - L·∫•y s·ªë d∆∞ t√†i kho·∫£n

### Transactions

- `GET /wallet/can-withdraw` - Ki·ªÉm tra c√≥ th·ªÉ r√∫t ti·ªÅn
- `POST /transactions/deposit` - N·∫°p ti·ªÅn
- `POST /transactions/withdraw` - R√∫t ti·ªÅn
- `GET /transactions` - Danh s√°ch giao d·ªãch
- `GET /transactions/export.csv` - Xu·∫•t CSV

### Admin (Admin/Superadmin only)

- `GET /admin/users` - Danh s√°ch users
- `PATCH /admin/users/:id` - C·∫≠p nh·∫≠t user (Superadmin only)
- `POST /admin/users/:id/resend-verification` - G·ª≠i l·∫°i m√£ x√°c minh
- `GET /admin/transactions` - T·∫•t c·∫£ giao d·ªãch
```

### Error Codes Documentation

```markdown
## üìä Error Codes

### Authentication Errors

- `EMAIL_EXISTS`: Email ƒë√£ t·ªìn t·∫°i v√† ƒë√£ verified
- `EMAIL_NOT_VERIFIED`: Email ch∆∞a ƒë∆∞·ª£c x√°c minh
- `INVALID_CODE`: M√£ x√°c minh kh√¥ng h·ª£p l·ªá
- `CODE_EXPIRED`: M√£ x√°c minh ƒë√£ h·∫øt h·∫°n
- `INVALID_CREDENTIALS`: Email/password kh√¥ng ƒë√∫ng
- `UNAUTHORIZED`: Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
- `FORBIDDEN`: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p

### Transaction Errors

- `INSUFFICIENT_FUNDS`: S·ªë d∆∞ kh√¥ng ƒë·ªß
- `LIMIT_PER_TRANSACTION`: V∆∞·ª£t qu√° gi·ªõi h·∫°n m·ªói giao d·ªãch
- `DAILY_LIMIT_EXCEEDED`: V∆∞·ª£t qu√° gi·ªõi h·∫°n h√†ng ng√†y
- `IDEMPOTENT_REPLAY`: Giao d·ªãch tr√πng l·∫∑p (clientRequestId)
```

## README.md Maintenance

### Required Sections

1. **Project Overview**: M√¥ t·∫£ ng·∫Øn g·ªçn
2. **Features**: Danh s√°ch t√≠nh nƒÉng ch√≠nh
3. **Installation**: H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t
4. **Configuration**: Environment variables
5. **API Documentation**: Links ƒë·∫øn Swagger
6. **Scripts**: Available npm/yarn scripts
7. **Architecture**: Project structure
8. **Security**: Security features
9. **Testing**: How to run tests
10. **Deployment**: Docker v√† production setup

### Update Triggers

- Th√™m feature m·ªõi ‚Üí C·∫≠p nh·∫≠t Features section
- Thay ƒë·ªïi API ‚Üí C·∫≠p nh·∫≠t API Documentation links
- Th√™m script m·ªõi ‚Üí C·∫≠p nh·∫≠t Scripts section
- Thay ƒë·ªïi architecture ‚Üí C·∫≠p nh·∫≠t Architecture section
- Th√™m security feature ‚Üí C·∫≠p nh·∫≠t Security section

## Documentation Quality Checklist

### Swagger Checklist

- [ ] T·∫•t c·∫£ endpoints c√≥ `@ApiOperation()`
- [ ] T·∫•t c·∫£ DTOs c√≥ `@ApiProperty()`
- [ ] T·∫•t c·∫£ responses c√≥ `@ApiResponse()`
- [ ] Authentication ƒë∆∞·ª£c document ƒë√∫ng
- [ ] Error responses c√≥ examples
- [ ] Request/response examples work
- [ ] Swagger UI loads without errors

### FEATURES.md Checklist

- [ ] Feature list is up to date
- [ ] API endpoints are documented
- [ ] Error codes are listed
- [ ] Business rules are explained
- [ ] Limits and constraints are documented
- [ ] Performance considerations noted

### README.md Checklist

- [ ] Installation instructions work
- [ ] Environment variables are documented
- [ ] Scripts are up to date
- [ ] API documentation links work
- [ ] Architecture diagram is current
- [ ] Security features are highlighted

## Automated Documentation

### Pre-commit Hooks

```bash
# Check if Swagger is up to date
npm run swagger:check

# Validate documentation
npm run docs:validate

# Generate API documentation
npm run docs:generate
```

### CI/CD Integration

```yaml
# .github/workflows/docs.yml
- name: Check Documentation
  run: |
    npm run docs:validate
    npm run swagger:check

- name: Update Documentation
  run: |
    npm run docs:generate
    npm run docs:deploy
```

## Documentation Standards

### Writing Style

- S·ª≠ d·ª•ng ti·∫øng Vi·ªát cho user-facing docs
- S·ª≠ d·ª•ng ti·∫øng Anh cho technical docs
- Consistent terminology
- Clear and concise descriptions
- Examples for complex concepts

### Code Examples

- Always include working examples
- Use realistic data
- Show both success and error cases
- Include authentication when needed
- Use proper HTTP status codes

### Version Control

- Commit documentation changes with code changes
- Use descriptive commit messages
- Tag releases with documentation updates
- Maintain changelog for breaking changes

## Swagger Best Practices

### Organization

- Group endpoints by feature (`@ApiTags()`)
- Use consistent naming conventions
- Order endpoints logically
- Include authentication requirements

### Descriptions

- Write clear, concise descriptions
- Include business context
- Mention side effects
- Document rate limiting

### Examples

- Use realistic data
- Show edge cases
- Include error examples
- Test examples in Swagger UI

### Validation

- Document all validation rules
- Show error messages
- Include format requirements
- Mention optional vs required fields
